#include "shell.h"
/**
 * get_environ - returns a copy of the string array containing environment variables
 * @info: Structure containing potential arguments. Used to maintain constant function prototype.
 * Return: String array containing environment variables
 */
char **get_environ(info_t *info)
{
    if (!info->environ || info->env_changed)
    {
        int num_env_vars = list_length(info->env);
        info->environ = malloc((num_env_vars + 1) * sizeof(char *));
        if (info->environ == NULL)
        {
            perror("Memory allocation error");
            exit(EXIT_FAILURE);
        }

        int i = 0;
        Node *current = info->env;
        while (current != NULL)
        {
            info->environ[i] = strdup(current->value);
            if (info->environ[i] == NULL)
            {
                perror("Memory allocation error");
                exit(EXIT_FAILURE);
            }
            current = current->next;
            i++;
        }
        info->environ[num_env_vars] = NULL;
        info->env_changed = 0;
    }

    return info->environ;
}

/**
 * _unsetenv - Remove an environment variable
 * @info: Structure containing potential arguments. Used to maintain constant function prototype.
 * @var: The string representing the environment variable to remove
 * Return: 1 if the variable was successfully removed, 0 otherwise
 */
int _unsetenv(info_t *info, char *var)
{
    if (!info->env || !var)
        return 0;

    Node *current = info->env;
    Node *prev = NULL;
    int env_changed = 0;

    while (current != NULL)
    {
        char *p = starts_with(current->value, var);
        if (p && *p == '=')
        {
            if (prev == NULL)
                info->env = current->next;
            else
                prev->next = current->next;
            
            free(current->value);
            free(current);
            current = prev ? prev->next : info->env;
            env_changed = 1;
        }
        else
        {
            prev = current;
            current = current->next;
        }
    }

    info->env_changed = env_changed;
    return env_changed;
}

/**
 * _setenv - Initialize a new environment variable or modify an existing one
 * @info: Structure containing potential arguments. Used to maintain constant function prototype.
 * @var: The string representing the environment variable property
 * @value: The string representing the environment variable value
 * Return: Always 0
 */
int _setenv(info_t *info, char *var, char *value)
{
    if (!var || !value)
        return 0;

    size_t var_len = _strlen(var);
    size_t value_len = _strlen(value);
    size_t buf_size = var_len + value_len + 2;

    char *buf = malloc(buf_size);
    if (!buf)
        return 1;

    _strcpy(buf, var);
    _strcat(buf, "=");
    _strcat(buf, value);

    Node *node = info->env;
    char *p;

    while (node)
    {
        p = starts_with(node->value, var);
        if (p && *p == '=')
        {
            free(node->value);
            node->value = buf;
            info->env_changed = 1;
            return 0;
        }
        node = node->next;
    }

    add_node_end(&(info->env), buf, 0);
    free(buf);
    info->

